[
    "书签标题",
    "这是一个测试aaaaaaaaaaaaa",
    "全部展开/收起",
    "全部取消选择",
    "关于",
    "虚拟电路板\n版权所有 (c) 2022-2024 Reverie Foundry。保留所有权利。\n\n使用 Godot 引擎制作。\n第三方许可证可在安装目录中获取。",
    "关闭",
    "Virtual Circuit Board 的新内容",
    "虚拟电路板\n版权所有 (c) 2022 Reverie Foundry。保留所有权利。\n\n使用 Godot 引擎制作。\n第三方许可证可在安装目录中获取。",
    "保存",
    "你确定要退出吗？",
    "是",
    "否",
    "光敏性癫痫警告",
    "        极少数人在观看某些视觉图像时(包括视频游戏中的闪烁光线或图案)可能会发生癫痫发作。即使没有癫痫或相关病史的人也可能有未被诊断出的疾病, 在观看视频游戏时引发“光敏性癫痫发作”。\n\n        这些癫痫发作可能有多种症状, 包括头晕、视力改变、眼睛或面部抽搐、手脚颤抖、定向障碍、混乱或短暂的意识丧失。癫痫发作还可能导致昏迷或抽搐, 从而引起跌倒或撞击周围物体的伤害。\n\n        如果你出现上述任何症状, 请立即停止游戏并咨询医生。家长应留意或询问孩子是否有上述症状。儿童和青少年比成人更容易发生此类癫痫发作。采取以下预防措施可降低光敏性癫痫发作风险: 在明亮的房间中游戏；不要在困倦或疲劳时游戏。\n\n    如果你或你的亲属有癫痫或相关病史, 请在游戏前咨询医生。",
    "不再显示此警告",
    "设置",
    "窗口",
    "全屏",
    "无边框",
    "垂直同步",
    "帧率限制器",
    "UI 缩放",
    "1x",
    "图形",
    "网格",
    "辉光",
    "动态背景",
    "文本编辑器",
    "汇编字体大小",
    "笔记字体大小",
    "快捷键",
    "操作",
    "按键或按钮",
    "操作名称",
    "章节标题",
    "汇编编辑器",
    "绑定操作时按“Esc”取消, “Backspace”清除。",
    "重置",
    "丢弃未保存的更改？",
    "丢弃",
    "取消",
    "警告",
    "确定",
    "选项",
    "0",
    "外部汇编",
    "外部汇编文件\n必须与项目路径相同, \n以“.vcbasm”为扩展名。",
    "导入与导出",
    "使用下方按钮在\n项目与外部汇编文件\n之间复制数据。",
    "嵌入数据",
    "将 vcbasm 的数据\n复制到项目文件中, \n并禁用外部编辑。",
    "导入 ↓",
    "导出 ↑",
    "嵌入并本地编辑",
    "确认",
    "切换书签",
    "外部编辑汇编",
    "从与项目路径相同且以“.vcbasm”结尾的文本文件加载汇编",
    "从与项目路径相同且以“.vcbmem”结尾的二进制文件加载 VMem",
    "使用外部基础 VMem",
    "持久化 VMem",
    "外部汇编与 VMem",
    "跟踪 VMem 地址",
    "无错误。",
    "L 1\nC 1",
    "[b]蓝图标题[/b] \n\n在示例图片中, 我们可以看到两个元件之间的简单连接: 顶部的锁存器通过锁存器和连线之间的写入墨迹, 将其状态输出到黄色连线上。\n\n底部的缓冲器通过连线和缓冲器之间的读取墨迹, 从黄色连线接收信号作为输入。\n\n[b]标签: [/b] 加法器, 16位, 高速",
    "蓝图标题 \n\n在示例图片中, 我们可以看到两个元件之间的简单连接: 顶部的锁存器通过锁存器和连线之间的写入墨迹, 将其状态输出到黄色连线上。\n\n底部的缓冲器通过连线和缓冲器之间的读取墨迹, 从黄色连线接收信号作为输入。\n\n标签: 加法器, 16位, 高速",
    "将蓝图粘贴到电路板",
    "复制蓝图到剪贴板",
    "编辑蓝图",
    "复制蓝图",
    "删除蓝图",
    "删除",
    "蓝图标题",
    "编辑蓝图",
    "名称 (32/32)",
    "Lorem Ipsum",
    "描述 (512/512)",
    "用逗号分隔标签。",
    "标签 (16/16)",
    "使用“更新”按钮将电路替换为\n当前选择或剪贴板蓝图的电路。",
    "电路",
    "用当前选择更新电路",
    "更新(选择)",
    "用剪贴板蓝图的电路更新电路",
    "更新(剪贴板)",
    "错误状态",
    "搜索",
    "标签",
    "已找到 125 个蓝图",
    "上一页",
    "下一页",
    "切换标签面板",
    "从选择创建蓝图",
    "从剪贴板创建蓝图",
    "可从电路选择或剪贴板蓝图字符串创建蓝图",
    "新蓝图",
    "从磁盘重新加载蓝图",
    "图层",
    "逻辑层",
    "高装饰层",
    "低装饰层",
    "橡皮擦工具",
    "撤销\n$ed_undo",
    "重做\n$ed_redo",
    "工具",
    "绘图工具",
    "阵列工具\n$ed_tool_array",
    "铅笔工具\n$ed_tool_pencil",
    "橡皮擦工具\n$ed_tool_eraser",
    "颜色选择工具 (Alt)",
    "选择工具\n$ed_tool_selection",
    "油漆桶工具\n$ed_tool_bucket",
    "光标信息",
    "悬停墨迹  ",
    "无",
    "位置     ",
    "X",
    "2000",
    "Y",
    "1024",
    "墨迹",
    "空间优化",
    "交叉\n$ed_array_cross",
    "隧道",
    "网格",
    "总线(右键更改颜色)",
    "连线",
    "写入\n$ed_array_write",
    "读取\n$ed_array_read",
    "连线(右键更改颜色)",
    "门电路",
    "缓冲器",
    "与门",
    "或门",
    "异或门",
    "反向门",
    "非门",
    "与非门",
    "或非门",
    "同或门",
    "通用元件",
    "锁存器开",
    "锁存器关",
    "时钟",
    "时钟间隔(周期)",
    "LED",
    "LED 调色板",
    "000000, ffffff, ff0000, 00ff00, 0000ff, ff0000, 00ff00, 0000ff, ff0000, 00ff00, 0000ff, ff0000, 00ff00, 0000ff, ff0000, 00ff00",
    "0/16",
    "定时器",
    "定时器间隔(毫秒)",
    "随机",
    "随机种子",
    "使用当前时间作为种子",
    "断点",
    "无线(右键更改通道)",
    "注释",
    "填充",
    "油漆桶",
    "填充相邻单元格",
    "启用后, 油漆桶工具只会填充直接\n相邻或连接的单元格。禁用时, \n棋盘上所有具有相同墨迹或颜色的单元格都将被填充。",
    "穿越交叉",
    "启用后, 油漆桶工具填充时会穿越\n交叉墨迹连接的单元格。",
    "穿越隧道",
    "启用后, 油漆桶工具填充时会穿越\n隧道墨迹连接的单元格。",
    "忽略空白区域",
    "启用后, 油漆桶工具不会填充空白区域(无墨迹单元格), \n以防误操作导致整个电路板被填满。",
    "墨迹颜色回退",
    "启用该选项且正在编辑装饰层时, \n若点击单元格未被装饰(即未被覆盖), \n则油漆桶会使用该单元格的墨迹颜色作为样本。",
    "画刷",
    "大小",
    "8",
    "形状",
    "方形画刷",
    "菱形画刷",
    "圆形画刷",
    "过滤",
    "阵列",
    "重复",
    "1",
    "角度",
    "更改角度\n$ed_array_rotate_right",
    "偏移",
    "Y 方向间距",
    "自动交叉切换\n$ed_array_toggle_autocross",
    "旋转",
    "轴约束角度",
    "轴约束切换",
    "自动交叉",
    "多色连线",
    "仿真",
    "周期",
    "102f",
    "VMem 的状态与地址",
    "VMem",
    "0xfffff",
    "鼠标交互模式",
    "按下鼠标按钮时切换锁存器",
    "切换",
    "按下鼠标按钮时将锁存器状态设为开, \n松开时立即设为关",
    "按下",
    "统计",
    "视图",
    "切换数值显示模式: \n绝对值、百分比。",
    "绝对值",
    "切换排序显示模式: \n默认(电路编辑器顺序)、降序、升序。",
    "默认",
    "绘制区域总面积。不含注释和填充墨迹的单元格。",
    "单元格: 123",
    "123",
    "电路中唯一连线和元件的总数。",
    "实体: 123",
    "选择",
    "操作",
    "复制选择",
    "粘贴选择",
    "复制选择",
    "删除选择",
    "应用选择",
    "变换",
    "左旋选择",
    "右旋选择",
    "镜像",
    "水平镜像选择",
    "垂直镜像选择",
    "蓝图字符串",
    "将选择复制为文本到剪贴板",
    "从剪贴板文本粘贴选择",
    "复制与粘贴蓝图时包含装饰层",
    "选项",
    "粘贴空单元格",
    "启用时, 选择工具在应用选择时会包含空(无墨迹)单元格。",
    "信息",
    "左键选择 | 右键平铺",
    "左键点击选择可移动, \n右键点击开始平铺。",
    "拖放",
    "拖放图片插入为当前图层的选择。",
    "装饰",
    "事件日志",
    "周期 1026264\n在 128, 2040 处达到断点",
    "反转",
    "全部",
    "清除",
    "保存电路",
    "输入",
    "Lorem ipsum.",
    "内容",
    "流控制 II",
    "示例图片中显示了两个元件之间的简单连接: 顶部的锁存器通过写入墨迹输出到黄色连线。\n\n底部的缓冲器通过读取墨迹从黄色连线接收信号。\n\n在此示例中, 信号只会从锁存器流向缓冲器, 反向不会。",
    "将此电路粘贴到电路板",
    "图片说明",
    "切换目录",
    "开始",
    "结束",
    "用户指南",
    "在本指南中, 你将了解如何开始使用[i]虚拟电路板[/i]。",
    "图例与电路",
    "用户指南的部分页面采用图片辅助说明。这些图片会编号, 可称为[i]图例[/i]或[i]电路[/i]。电路类图片右上角有按钮, 可将示例电路粘贴到电路板上, 便于详细查看。\n\n请参阅[i]图1[/i]和[i]电路1[/i]。",
    "图1 - VCB 启动画面。",
    "电路1 - 入门电路。",
    "简介",
    "[i]虚拟电路板[/i]基础介绍。",
    "编辑与仿真",
    "[t]VCB[/t]分为编辑和仿真两种模式。\n\n编辑时可使用绘图工具修改电路, 使用汇编编辑器编写程序。仿真时可运行并交互电路。\n\n可通过界面仿真控制区的[t]编辑/仿真[/t]按钮切换模式。\n\n进入仿真模式可能需要几秒, 期间游戏会[t]编译[/t]电路。",
    "仿真引擎",
    "[t]VCB[/t]拥有高性能事件驱动型[t]仿真引擎[/t]。\n\n仿真是[t]确定性[/t]的, 同一电路每次仿真结果一致, 不受随机因素影响。\n\n事件驱动使引擎仅处理电路的活跃部分, 可实现每秒数百万次更新, 具体取决于硬件。\n\n可方便地调整仿真速率, 也可暂停仿真并手动推进若干步。",
    "用户界面",
    "游戏 UI 导航。",
    "导航与快捷键",
    "[t]平移[/t]\n按住[i]中键[/i]拖动鼠标平移视图, 或用方向键移动镜头。\n\n[t]缩放[/t]\n滚动[i]鼠标滚轮[/i]可缩放视图, 或用[i](=)[/i]和[i](-)[/i]键。缩放点与鼠标位置对齐。\n\n[i]提示: 相机控制可在快捷键菜单自定义。[/i]\n\n[t]快捷键[/t]\n所有快捷键在[i]快捷键菜单[/i]列出并可重映射。快捷键标签页可在 UI 右上角的设置菜单(齿轮图标)中访问。",
    "停靠系统",
    "[t]VCB[/t]界面采用模块化可自定义的[t]停靠系统[/t]。共有四个停靠栏, 分布在屏幕两侧。每个停靠栏可显示一个[i]面板[/i], 如本[i]用户指南[/i]。大多数面板为编辑器, 用于项目的不同方面。\n\n[t]电路编辑器[/t]——电路绘制等相关选项。\n[t]汇编编辑器[/t]——编写仿真可用的程序。\n[t]笔记[/t]——项目文档记录区。\n[t]用户指南[/t]——参考手册。\n[t]蓝图库[/t]——便捷保存电路蓝图。\n[t]VMem 设置[/t]——配置虚拟内存位置。\n[t]VMem 编辑器[/t]——编辑/查看虚拟内存数据。\n[t]虚拟显示器[/t]——显示相关设置。\n[t]虚拟输入[/t]——虚拟输入设备配置。\n\n可点左上角图标切换面板。\n\n停靠栏及侧边栏可调整大小与折叠, 便于进一步调整界面。",
    "右键行为",
    "某些 UI 元素右键有[t]辅助功能[/t], 如仿真速率滑块右键切换为数字输入。\n\n带辅助操作的控件鼠标悬停时光标会变为[i]加号和黄色[/i]。",
    "虚拟电路",
    "[t]VCB[/t]电路构成方式。",
    "基于绘图的界面",
    "在[t]VCB[/t]中, 我们通过绘制墨迹在称为[t]电路板[/t]的方格画布上构建电路。\n\n大部分墨迹是[t]元件[/t](如逻辑门)或用于信号传递的[t]连线[/t], 也有一些不参与仿真的墨迹, 分为[t]空间优化[/t]和[t]注释[/t]两类。\n\n接下来将介绍各类元件与连线、墨迹与实体的关系、实体间连接方式和可用元件类型。随后介绍空间优化墨迹及其在紧凑电路设计中的应用。",
    "元件与连线",
    "[t]元件[/t]和[t]连线[/t]是[t]VCB[/t]电路基础。\n\n元件执行逻辑运算, 通常根据一个或多个外部输入改变状态和输出。八种标准逻辑门均为元件, 此外[t]VCB[/t]还实现了其他特殊元件。\n\n连线(导线)是[t]VCB[/t]中信号传递的通道, 用于连接元件。",
    "墨迹与实体 I",
    "同类型的元件墨迹相邻时会合并为一个[t]实体[/t](横向/纵向都可)。在[i]电路1[/i]中有4组或门墨迹, 仿真时会形成4个独立元件。\n\n实体形状/大小不限, 只要墨迹相邻。\n\n不同类型元件墨迹(如或门和异或门)相邻不会合并。",
    "电路1 - 相邻墨迹合并为单一实体。",
    "墨迹与实体 II",
    "与元件不同, 连线即使颜色不同也会合并为一个实体, 因为连线有16种颜色, 还有两个特殊连线墨迹(写入和读取)用于指示连接和信号流向。\n\n下图电路包含四条连线, 均分布有流控制墨迹。",
    "电路1 - 不同颜色的连线合并为一体。",
    "流控制 I",
    "在[t]VCB[/t]中, 元件与连线不会自动连接, 需通过中间墨迹指定信号流方向, 实现精细控制。\n\n用于流控制的墨迹为写入和读取, 对应元件角度命名: 元件将其[color=#e06666][b]输出[/b][/color]“写入”连线, 信号到达目标后通过[color=#6fa8dc][b]读取[/b][/color]输入元件。如下所示: \n\n元件 -> [color=#e06666][b]写入[/b][/color] -> 连线 -> [color=#6fa8dc][b]读取[/b][/color] -> 元件",
    "需注意[iw]写入[/iw]和[ir]读取[/ir]墨迹本质上仍属于连线, 只是有特殊连接行为。\n\n当[iw]写入[/iw]或[ir]读取[/ir]墨迹位于连线中间时, 并不会在连线两侧建立连接, [t]连接只发生在连线与元件之间[/t]。\n\n连线中的[iw]写入[/iw]或[ir]读取[/ir]墨迹仅作为普通连线墨迹存在。",
    "电路1 - 一条由三种颜色及特殊连线墨迹(写入、读取)组成的连线。",
    "流控制 III",
    "在[i]电路1[/i]中, 顶部锁存器通过[color=#e06666][b]写入[/b][/color]墨迹输出到黄色连线。\n\n底部缓冲器通过[color=#6fa8dc][b]读取[/b][/color]墨迹从黄色连线接收信号。",
    "电路1 - 该例中信号只会从锁存器流向缓冲器, 反向不通。",
    "流控制 IV",
    "流控制墨迹必须与元件直接相邻, 即[color=#e06666][b]写入[/b][/color]或[color=#6fa8dc][b]读取[/b][/color]墨迹的四个[t]直接邻接单元格[/t]之一需为元件, 才能建立连接。\n\n在使用空间优化墨迹时尤需注意。",
    "不可计数连接 I",
    "元件可向连线[t]写入[/t]、从连线[t]读取[/t]或[t]同时进行[/t], 但连接仅建立一次。\n\n即, 无论接触点多少或接触面积大小, 两个实体之间的连接[t]不可计数[/t], 只存在连接或无连接两种状态。",
    "不可计数连接 II",
    "LED 元件颜色随其激活输入数量变化。在[i]电路1[/i]顶部例中, 两个 LED 只从一条连线接收信号, 因此颜色一致。\n\n底部两个 LED 因接收信号数量为3, 颜色不同。左侧为增加了两条连线, 右侧为信号经缓冲器分三路输入 LED。",
    "电路1 - LED 会根据激活输入数量变色。",
    "电路2 - 另一个异或门示例。",
    "多输入/输出",
    "元件与连线均支持[t]多输入/输出连接[/t], 包括常规只有两输入一输出的逻辑门。\n\n连线只要有任一写入元件激活即激活, 表现类似或门。\n\n下一页将介绍各门电路的输入响应行为, 随后介绍通用元件及其特殊行为。",
    "门元件",
    "下表为各门电路输入响应: \nA = 激活输入数, T = 总输入数\n\n[t]缓冲器 -[/t] [i]A > 0[/i]\n[t]与门 -[/t] [i]A > 0 && A == T[/i]\n[t]或门 -[/t] [i]A > 0[/i]\n[t]异或门 -[/t] [i]A % 2(奇数激活输入)[/i]\n\n[t]非门 -[/t] [i]!缓冲器[/i]\n[t]与非门 -[/t] [i]!与门[/i]\n[t]或非门 -[/t] [i]!或门[/i]\n[t]同或门 -[/t] [i]!异或门[/i]\n\n你可能注意到缓冲器与或门(及其反向门)逻辑相同, 原因是[t]可读性[/t]。用缓冲器实现信号延迟与防反向, 或门用于实际“或”逻辑, 有助于电路理解。\n\n若不考虑可读性, 也可利用元件冗余进一步[t]压缩[/t]电路, 使两个“或门”或两个“缓冲器”并排。",
    "通用元件 I",
    "除了基础逻辑门, [t]VCB[/t]还包含多种[t]通用元件[/t], 实现特殊功能。下文逐一介绍。\n\n部分元件可右键在[i]电路编辑器面板[/i]墨迹上设置属性, 且属性为所有实例全局应用。\n\n[t]锁存器开/关 -[/t] [i]任一输入上升沿时切换状态。[/i]\n仿真中可用鼠标[t]交互锁存器[/t], 有切换和按下两种交互方式: 切换为切换状态；按下为按住左键时激活, 松开或输入激活后关闭。开/关两种锁存器仅初始状态有别。\n\n[t]时钟 -[/t] [i]每N仿真周期切换。[/i]\n可右键菜单调整间隔。\n\n[t]LED -[/t] [i]激活输入大于0时点亮。[/i]\n颜色随激活输入数变化, 调色板可右键全局设置。",
    "通用元件 II",
    "[t]定时器 -[/t] [i]每N毫秒切换。[/i]\n间隔可右键菜单调整。\n\n[t]随机 -[/t] [i]任一输入上升沿随机切换。[/i]\n默认使用当前时间作为种子, 可右键自定义。\n\n[t]断点 -[/t] [i]激活输入大于0时激活。[/i]\n自身状态上升沿触发断点, 暂停仿真并记录事件。\n\n[t]无线(0~3) -[/t] [i]激活输入大于0时激活。[/i]\n四种无线墨迹均表现为全局或门。",
    "至此, 我们已掌握用多种[t]连线与元件墨迹[/t]制作电路的基础。但很快我们就会遇到二维空间限制, 最大挑战是如何在连线被其他连线阻挡时实现不同元件的互连。\n\n这时就需要用到[t]空间优化墨迹[/t], 它们为[t]VCB[/t]电路带来紧凑设计的自由。接下来会逐一介绍各类空间优化墨迹, 首先是最基础的交叉墨迹。需注意: \n\n[t]1.[/t] 空间优化墨迹多用于连线, 但对元件同样适用。\n\n[t]2.[/t] 除总线外, 空间优化墨迹彼此不交互, 需有连线、元件或总线分隔。",
    "交叉墨迹",
    "[t]交叉墨迹[/t]可用于正交[t]连线/元件[/t]交汇处, 使其独立共存。交叉墨迹只能单像素宽, 且相距至少一格, 不能连用/堆叠。\n\n[i]电路1[/i]顶部为交叉墨迹正确用法, 底部为错误用法。\n\n交叉墨迹同样适用于元件(如逻辑门), 如[i]电路2[/i]所示。",
    "电路1 - 顶部交叉墨迹正确, 底部错误。",
    "电路2 - 单个与门连接三条连线。",
    "隧道墨迹",
    "[t]隧道[/t]类似交叉墨迹, 但采用[t]成对入口出口[/t], 可相距较远。\n\n如左侧元件、连线或总线接触隧道(入口), 则会与右侧第一个有相同类型墨迹接触隧道(出口)连接, 中间可有其他隧道或任意内容, 如[i]电路1[/i]所示。",
    "电路1 - 不同颜色连线通过隧道相交。",
    "网格墨迹",
    "[t]网格墨迹[/t]是无线墨迹的更通用替代品。类似隧道, 允许不同位置的连线、总线、元件通过网格合并。",
    "电路1 - 连线通过网格实现远距离连接。",
    "总线墨迹",
    "[t]总线墨迹[/t]允许多个门电路和连线[t]共用同一区域[/t]。\n\n总线有6种颜色, 类似不同颜色连线, 接触时会合并。",
    "电路1 - 多个实体通过总线共用单元格。",
    "注释墨迹",
    "最后, [t]VCB[/t]包含不与电路交互的墨迹, 用于美观或文档: \n\n[t]注释[/t]——用于在电路板绘制说明。\n[t]填充[/t]——用于填充电路空隙, 也可用于装饰层。\n\n装饰与填充墨迹行为一致, 可互换。这样可以利用绘图工具的过滤功能分别删除。\n\n为方便, 类别还包含[t]无墨迹[/t], 常用于过滤时仅在空区域绘制。",
    "编辑",
    "在[t]VCB[/t]中构建电路。",
    "[t]VCB[/t]有多种绘图工具便于电路搭建: \n\n[t]阵列[/t]——最灵活, 适合批量绘制连线或均匀元件。\n[t]铅笔[/t]——大画笔绘制。\n[t]橡皮擦[/t]——擦除像素。\n[t]颜色选择[/t]——选取墨迹成为当前。\n[t]选择[/t]——移动/复制/粘贴/复制等。\n[t]油漆桶[/t]——填充同色区域。\n\n部分工具有特殊功能, 如[t]过滤[t]。",
    "阵列工具",
    "[t]阵列工具[/t]是最灵活的。适合批量绘制连线或均匀分布元件。\n\n可在工具选项中调整像素数、间距和角度, 还可开启自动交叉功能, 自动在非空区域加入交叉墨迹。\n\n绘图时按[t]shift[/t]可启用轴约束, 便于画直线。",
    "[t]过滤[/t]是阵列、铅笔、橡皮擦的通用功能, 可指定哪些墨迹可被覆盖。\n\n方便更改单条连线颜色而不影响周围, 也可仅在空白区域绘制。",
    "蓝图",
    "[t]蓝图[/t]是分享电路片段的便捷方式, 无需整个项目文件。通过将选区复制为[t]文本[/t]到剪贴板, 便于与他人分享。反向操作同样简单, 将文本粘贴回电路板即可。\n\n蓝图功能可通过[t]选择工具[/t]访问。\n\n[i]提示: 蓝图规范见用户指南附录。[/i]",
    "仿真模式下, 元件和连线墨迹颜色会随激活状态变化, 激活时高亮, 未激活时变暗。\n\n可通过编辑装饰层自定义激活/未激活颜色, 实现高度美化。\n\n注释、填充、交叉等非元件/连线墨迹仅受“低装饰层”影响(因这些墨迹无激活状态)。\n\n使用[t]选择工具[/t]可将外部图片拖放到装饰层覆盖电路。",
    "编辑模式提示",
    "[t]1.[/t] 熟练使用阵列工具(及其功能), 它是[t]VCB[/t]最灵活的工具, 其次是选择工具。\n\n[t]2.[/t] 多参考“示例项目”获取灵感。\n\n[t]3.[/t] 游戏会每3分钟及进入仿真前自动保存。自动保存可在[i]最近项目[/i]菜单中恢复。\n\n[t]4.[/t] 铅笔工具可绘制粗线, 但应慎用, 会浪费空间。\n\n[t]5.[/t] 善用快捷键。\n\n[t]6.[/t] 连线的墨迹符号可通过右键“墨迹符号”按钮显示。",
    "仿真模式提示",
    "[t]1.[/t] 用仿真控制调整[t]仿真速度、暂停[/t]、步进。\n\n[t]2.[/t] 仿真中可用鼠标[t]交互锁存器[/t]元件。\n\n[t]3.[/t] 关注电路编辑器面板的事件日志卡, 会提示相关警告。\n\n[t]4.[/t] 仿真时悬停鼠标可高亮整条连线或元件(需启用高亮悬停实体功能, 按钮在界面右上角)。\n\n",
    "虚拟设备",
    "在[t]VCB[/t]中, 虽然仅用墨迹即可实现很多功能, 但部分项目因空间、复杂度、性能或特殊需求难以实现。\n\n这时可用[t]虚拟设备[/t], 它们是构建高级电路的专用工具。下文将逐一介绍。",
    "虚拟内存 I",
    "虚拟内存([t]VMem[/t])共有[t]2²⁰个4字节可寻址单元[/t]。约等于[t]一百万行32位[/t], 可存4MiB数据, 足以支持大型程序。当然不必用满32位, 如8位计算机只用其中8位。\n\n电路可通过两组类似锁存器的元件读写[t]VMem[/t], 一组用于写地址, 一组用于读写内容。这些特殊元件在仿真开始时由游戏自动放置, 编辑时可在[t]VMem 设置[/t]菜单配置位置。仿真时每次只可访问一个地址, 读/写数据。\n\n在设置菜单还可设定某内存区域为[i]仿真结束时保留[/i](持久化), 注意这仅为复制操作, 修改持久区不会清空项目内存。\n\n外部VMem文件为大端序。",
    "虚拟内存 II",
    "通过[t]VMem 编辑器[/t]面板, 可方便地在编辑模式下[t]修改虚拟内存单元值[/t]。\n\n支持以[i]十六进制或二进制[/i]显示/输入, 十六进制无需加[i]0x[/i]前缀, 二进制直接输入即可, 十进制需加[i]0d[/i]前缀。\n\n高级需求下也可外部编辑虚拟内存。\n\n[i]VMem 编辑器[/i]还可作为仿真调试工具, 实时跟踪当前地址、VMem 状态(红色为锁定, 绿色为就绪), 并观察单元值变化。\n\n[t]外部编辑注意事项[/t]\n\n[t]-[/t] 外部文件需玩家手动创建。\n[t]-[/t] VCB 只读取外部文件, 保存/移动项目时需手动复制外部文件。\n[t]-[/t] 外部 VMem 文件为大端序。",
    "虚拟内存 III",
    "[t]VMem 交互注意事项: [/t]\n\n[t]锁定(2周期访问)[/t]——地址变更后下一个周期 VMEM [i]锁定[/i], 期间锁存器输入将被拒绝, 并记录在事件日志。\n\n[t]内容优先级[/t]——同周期同时切换地址和内容锁存器时, 内容变化优先。即, 先修改当前单元内容, 再加载新地址。\n\n[cy][b]警告: VMem 与波纹进位计数器[/b]\n\n普通RCA计数器[b]不应[/b]用于递增VMem地址锁存器。其[i]“波纹”[/i]特性会导致锁存器几乎每周期都切换, 不仅导致[i]地址跳变[/i], 还会因VMem锁定出现[i]错误地址[/i]。[/cy]",
    "虚拟显示器",
    "[t]虚拟显示器[/t]可实现比 LED 元件及其驱动电路更高像素密度和色深的屏幕。\n\n支持[t]八种调色板索引色模式[/t]与[t]RGB模式[/t](支持1600万色)。多模式可在色深与内存占用间灵活选择。\n\n[t]虚拟显示器[/t]分辨率任意, 只要总像素不超2¹⁸, 且能放入电路板。缓冲区指针可仿真期间动态修改。\n\n",
    "虚拟输入",
    "借助[t]虚拟输入[/t], 仿真期间可用真实[t]键盘[/t]直接驱动电路板上的元件阵列, 扩展交互能力。",
    "汇编",
    "在[t]VCB[/t]中编程。",
    "概述",
    "为便于自制可编程计算机, [t]VCB[/t]实现了简单但可自定义的[t]汇编器[/t], 可自定义指令集。\n\n在汇编编辑器中编写的程序会汇编为机器码, 存入虚拟内存。",
    "汇编语言",
    "在编写程序前, 需了解汇编器如何将代码翻译为[t]机器码[/t]。首先要掌握的概念是[t]原语[/t]。\n\n[t]原语[/t]是编程的基本单元, 可为[t]字面量[/t](如-5, 0b0001, 0xFF)或[t]非字面量[/t](如foo, bar, baz)。非字面量必须定义后方可使用, 可随时取消或重定义, 分为符号、指针、标签三类。\n\n先了解汇编语法结构及原语在其中的作用。",
    "原语",
    "原语是一个[t]数字[/t]，可以是[t]字面量[/t](如 -5、0b0001、0xFF), 也可以是[t]非字面量[/t](如 foo、bar、baz)。非字面量原语是其字面量对应值的[t]别名[/t]，需要先[t]定义[/t]才能使用。其中有些可以在不需要时取消定义，或重新定义为另一个数值的别名。非字面量原语分为三类：符号、指针和标签。\n\n在详细介绍每种原语类型前, 先了解汇编语法结构及原语在其中的位置。",
    "语句 I",
    "汇编器按[t]语句[/t](换行或分号分隔)解析代码。语句可为[t]指令[/t]或[t]伪指令[/t]。\n\n[t]伪指令[/t]为汇编器本身的操作, 如定义/取消非字面量原语, 不会生成机器码。\n\n[t]指令[/t]由字面量和非字面量原语组成, 作为程序数据, 最终翻译为机器码。\n\n生成机器码时, 指令内所有原语(数字)会按位[t]或(OR)[/t], 结果存储于VMem。\n\n*如遇[i]表达式[/i]则按表达式处理。",
    "表达式",
    "可通过运算符构造表达式, 覆盖自动OR行为, 实现位运算和算术运算, 决定原语存储前的实际值。\n\n表达式仅可用于指令, 伪指令不能用。除括号外, 运算符间必须有空格。支持如下运算符: \n\n[b][cy]+[/cy][/b] 加法\n[b][cy]-[/cy][/b] 减法\n[b][cy]*[/cy][/b] 乘法\n[b][cy]/[/cy][/b] 除法\n[b][cy]%[/cy][/b] 取模\n[b][cy]~[/cy][/b] 按位非\n[b][cy]&[/cy][/b] 按位与\n[b][cy]|[/cy][/b] 按位或\n[b][cy]^[/cy][/b] 按位异或\n[b][cy]<<[/cy][/b] 左移\n[b][cy]>>[/cy][/b] 右移\n[b][cy]([/cy][/b] 开始子表达式\n[b][cy])[/cy][/b] 结束子表达式",
    "语句 II",
    "[code][ca]>[/ca] [cy]symbol[/cy] [cv]foo[/cv] [cg]0b0001[/cg]\n[ca]>[/ca] [cv]foo[/cv] [cg]0b1000[/cg][cy];[/cy] [cg]0xF7[/cg][/code]\n\n如上例, 3条语句, 第一行为[t]伪指令[/t](定义原语foo, 不生成机器码), 后两行为[t]指令[/t]。第二句foo 0b1000包含两个原语: 非字面量foo(0b0001)和字面量0b1000, 它们按位或后为0b1001, 存入虚拟内存, 第三句依次存储。",
    "汇编器",
    "游戏翻译指令为机器码时会[t]跳过虚拟内存首地址(0)[/t], 从1开始。数据按[t]大端序[/t]存储, 负数采用[t]二进制补码[/t]。\n\n空行和注释(#)自动忽略。\n\n[code][ca]>[/ca] [ce]# 这是注释。[/ce]\n[ca]>[/ca] [cv]psh[/cv][cy];[/cy] [cv]cal[/cv] [cb]Print[/cb][cy];[/cy] [cv]ret[/cv] [ce]# 另一行注释。[/ce][/code]\n\n掌握汇编语法及指令到机器码的转换后, 接下来详细介绍各类[t]原语[/t]。",
    "原语 - 数字",
    "[t]数字[/t]为字面量原语, 可用10进制、16进制、2进制(不支持浮点), 且不得超过32位, 以适应虚拟内存单元。\n\n[code][ca]>[/ca] [cg]10515545[/cg][cy];[/cy] [cg]-1[/cg][cy];[/cy] [cg]0xFFFF[/cg][cy];[/cy] [cg]0b01101010[/cg][/code]\n\n数字可用下划线分隔, 提升可读性。\n\n[code][ca]>[/ca] [cg]1_000_000[/cg][cy];[/cy] [cg]0b0000_1000[/cg][/code]",
    "原语 - 符号",
    "[t]符号[/t]为用户自定义值, 便于为操作码创建[t]助记符[/t]。需以标识符+数字字面量定义, 可重定义或取消。\n\n[code][ca]>[/ca] [cy]symbol[/cy] [cv]add[/cv] [cg]0xFF[/cg] [ce]# “add” 现在代表“0xFF”。[/ce]\n[ca]>[/ca] [cy]resymb[/cy] [cv]add[/cv] [cg]125[/cg]  [ce]# “add” 现在代表“125”。[/ce]\n[ca]>[/ca] [cy]unsymb[/cy] [cv]add[/cv]      [ce]# “add” 已取消定义。[/ce][/code]\n\n符号若至程序结束仍被定义, 显示为紫色, 否则为红色。",
    "原语 - 指针",
    "[t]指针[/t]用于内存地址。指针定义语句既是伪指令也是指令。可用数字字面量指定地址, 或用inline关键字自动分配。用repoint和unpoint限定作用域。\n\n如下示例, 将数值30存于0xFF地址, 并用“foo”作为别名。\n\n[code][ca]>[/ca] [cy]pointer[/cy] [cr]foo[/cr] [cg]0xFF 30[/cg][/code]\n\n第二例, inline关键字自动分配地址。\n\n[code][ca]>[/ca] [cy]pointer[/cy] [cr]bar[/cr] [cm]inline[/cm] [cg]5[/cg][/code]",
    "原语 - 标签",
    "[t]标签[/t]也是内存地址原语, 但有三点不同: 1. 指向定义后首条指令；2. 不能取消定义；3. 作用域全局, 可在定义前使用。用@符号定义。\n\n[code][ca]>[/ca] [cy]@[/cy] [cb]Sum[/cb]\n[ca]>[/ca] [cv]lia[/cv] [cg]10[/cg][cy];[/cy] [cv]ldb[/cv] [cr]value[/cr][cy];[/cy] [cv]add[/cv]\n\n[ca]>[/ca] [cy]@[/cy] [cb]MyOtherFunction[/cb]\n[ca]>[/ca] [cv]psh[/cv][cy];[/cy] [cv]cal[/cv] [cb]Sum[/cb][cy];[/cy] [cv]ret[/cv] [ce]# “Sum” 是 lia 10 所在地址的别名。[/ce]",
    "回顾",
    "在介绍更高级特性前, 先回顾所学: \n\n汇编代码用[t]语句[/t](换行/分号)分隔。[t]伪指令[/t]定义[t]原语[/t], 供[t]指令[/t]使用, 指令才是实际数据。\n\n生成机器码时, 指令内所有原语按位[t]或(OR)[/t], 遇表达式则按表达式处理。\n\n[t]指针[/t]原语特殊, 定义/重定义既是伪指令也是指令。",
    "origin 伪指令",
    "用[t]origin[/t]伪指令指定后续指令机器码存储的内存地址。常用于将数据与程序分开存储。\n\n[code][ca]>[/ca] [ck]origin[/ck] [cg]0xFF00[/cg]\n[ca]>[/ca] [cg]0b1010[/cg] [ce]# 存储于0xFF00。\n[ca]>[/ca] [cg]0b0101[/cg] [ce]# 存储于0xFF01。[/ce][/code]\n\n可用[t]orgprev[/t]恢复上一次origin指定地址, [t]orgbase[/t]恢复全部。假设汇编器当前地址为0xA1: \n\n[code][ca]>[/ca] [ck]origin[/ck] [cg]0xB1[/cg]\n[ca]>[/ca] [ck]origin[/ck] [cg]0xC1[/cg]\n[ca]>[/ca] [ck]origin[/ck] [cg]0xD1[/cg]\n[ca]>[/ca] [ck]origin[/ck] [cg]0xE1[/cg]\n[ca]>[/ca] [ck]origin[/ck] [cm]orgprev[/cm] [ce]# 地址切回0xD1。\n[ca]>[/ca] [ck]origin[/ck] [cm]orgprev[/cm] [ce]# 地址切回0xC1。\n[ca]>[/ca] [ck]origin[/ck] [cm]orgbase[/cm] [ce]# 地址切回0xA1。[/ce][/code]",
    "宏 I",
    "[t]宏[/t]可提升程序可读性, 简化复杂表达式。\n\n以[t]mov[/t]指令为例, 其格式为: 高4位为操作码, 3-2位为源寄存器, 1-0位为目标寄存器。\n\n因此不能直接用自动OR, 需用表达式移位和OR各参数, 例: \n[code][ca]>[/ca] [cv]mov[/cv] [cy]|[/cy] [cv]rgA[/cv] [cy]<<[/cy] [cg]2[/cg] [cy]|[/cy] [cv]rgB[/cv]\n[ca]>[/ca] [cv]mov[/cv] [cy]|[/cy] [cv]rgB[/cv] [cy]<<[/cy] [cg]2[/cg] [cy]|[/cy] [cv]rgA[/cv][/code]\n\n每条都写长表达式不便, 可用[i]宏[/i]简化: \n[code][ca]>[/ca] [cn]macro[/cn] [co]mov[/co] [cy]{[/cy][cg]0b11000000[/cg] [cy]|[/cy] [cr]a[/cr][cy]? <<[/cy] [cg]2[/cg] [cy]|[/cy] [cr]b[/cr][cy]?}[/cy]\n[ca]>[/ca] [co]mov[/co] [cv]rgA[/cv] [cv]rgB[/cv]\n[ca]>[/ca] [co]mov[/co] [cv]rgB[/cv] [cv]rgA[/cv][/code]\n\n如上, 宏使指令更简洁, 便于编写大型复杂程序。",
    "宏 II",
    "定义宏需用[t]macro[/t]关键字+名称+用花括号包裹的宏体。宏参数用小写字母加?表示。宏展开时, a?替换为第一个参数, b?为第二个, 以此类推。宏不能嵌套。\n\n宏亦可用[t]remac[/t]重定义, [t]unmac[/t]取消。\n\n宏相关错误分为两类: 汇编器报错为红色, 预处理器为橙色。",
    "书签",
    "书签可[t]快速跳转[/t]代码, 在汇编编辑器旁以标签显示, 点击跳转至定义行。书签不会被汇编器处理。用[t]bookmark[/t]和[t]sub_bookmark[/t]声明。\n\n[code][ca]>[/ca] [ca]bookmark[/ca] [cr]FunctionForSum[/cr] [ce]# 主题书签。[/ce]\n[ca]>[/ca] [cv]lia[/cv] [cg]10[/cg][cy];[/cy] [cv]ldb[/cv] [cr]value[/cr][cy];[/cy] [cv]add[/cv]\n\n[ca]>[/ca] [ca]sub_bookmark[/ca] [cr]PrintSumResult[/cr] [ce]# 子主题书签。[/ce]\n[ca]>[/ca] [cv]psh[/cv][cy];[/cy] [cv]cal[/cv] [cb]MyFunction[/cb][cy];[/cy] [cv]ret[/cv]",
    "外部编辑",
    "如需用[t]外部文本编辑器[/t]编写汇编代码, 可在[i]汇编编辑器[/i]面板下方启用外部编辑。此时游戏会读取与当前项目同名且以[i].vcbasm[/i]结尾的文本文件内容。\n\n[t]外部编辑注意事项[/t]\n\n[t]-[/t] 外部文件需手动创建。\n[t]-[/t] VCB 只读取外部文件, 保存/移动项目时需手动复制外部文件。",
    "结语",
    "总结。",
    "示例项目",
    "[t]VCB[/t]自带[t]示例项目[/t], 演示可在游戏中构建的电路。如[i]32位计算机[/i]项目包含ALU、指令译码器(可访问VMem)和滚动显示。\n\n示例项目可从 UI 右上角的[t]打开书本图标[/t]访问。",
    "图1 - 示例项目内的32位计算机。",
    "开发者的话",
    "至此你已掌握入门所需全部知识, 欢迎试玩[t]虚拟电路板[/t]。别忘了多看看示例项目, 将所学理论应用于实践。\n\n如需帮助, 欢迎加入游戏社区与我联系。\n\n祝你玩得开心！\n\n\n[t]– Mause[/t]",
    "附录",
    "补充资料。",
    "蓝图规范",
    "蓝图格式详情如下: \n\n[t]概述[/t]\n- 蓝图以[i]“VCB+”[/i]为前缀。\n- 数据经 Base64 编码。\n- 字节为大端序。\n\n[t]头部[/t]\n3字节蓝图版本\n6字节校验和(蓝图正文SHA-1截断)\n4字节宽度\n4字节高度\n\n[t]图层块[/t]\n4字节块大小\n4字节图层ID(逻辑=0, 装饰亮=1, 装饰暗=2)\n4字节未压缩缓冲区大小\nN字节zstd压缩的RGBA8缓冲区\n\n[t]文本块[/t]\n4字节块大小\n4字节数据ID(名称=1024, 描述=1025, 标签=1026)\n4字节未压缩缓冲区大小\nN字节zstd压缩UTF-8缓冲区\n\n[t]注意事项[/t]\n- 蓝图必须包含逻辑层块。\n- 装饰层块可选, 若使用则必须两者都含。\n- 文本块全部可选。\n\n[t]旧版蓝图[/t]\n- 旧版VCB蓝图以[i]“KLUv/”[/i]为前缀。",
    "[i]虚拟电路板[/i]\n版权所有 (c) 2022-2024 Reverie Foundry。保留所有权利。\n\n[i]使用 Godot 引擎制作。[/i]\n第三方许可证在安装目录。",
    "启用虚拟显示器",
    "编辑模式下可见",
    "聚焦视图",
    "将相机移动到\n显示器中心",
    "居中",
    "将相机移动到\n显示器左上角",
    "L",
    "将相机移动到\n显示器右下角",
    "R",
    "位置 XY",
    "分辨率 XY",
    "缩放 XY",
    "指向视频缓冲区的位置。\n\n如该字段设为1024, 虚拟显示器将在\n虚拟内存1024地址读取其值, 作为\n实际图像数据的位置指针。\n\n这样可通过修改缓冲区位置, 一次性切换显示内容。",
    "地址",
    "每个虚拟内存单元用于像素数据的最大比特数。\n\n虚拟显示器会用小于字长的最大色深整数倍作为每单元像素数。\n\n如色深为3位, 字长为16, 则每单元用低15位(即5像素), 忽略高17位。",
    "字长",
    "色深",
    "像素绘制方向。两种模式皆从显示器左上角至右下角: \n\n水平——按行自左至右、上至下。\n垂直——按列自上至下、左至右。",
    "方向",
    "1位, 2色, \n每虚拟内存地址32像素, \n大端序排列。",
    "调色板",
    "黄色-高位\n蓝色-低位",
    "启用虚拟输入",
    "将相机移动到\n接口位",
    "将相机移动到\n最高有效位",
    "MSB",
    "将相机移动到\n最低有效位",
    "LSB",
    "位数",
    "XY 偏移",
    "XY 尺寸",
    "按下-按键按住时激活。\n脉冲-每次单周期激活。",
    "模式",
    "按键名",
    "点击以检查",
    "绑定以换行分隔, 格式: \n\n<键> = <值>\n\n值可为数字(二/十/十六进制), \n或位列表: \n\n“[3, 1]”等价于“0b1010”。",
    "绑定",
    "Q = 0x20\nW = 16\nE = [3]\nR = 0x4\nT = 0b10\nY = 0b1",
    "外部 VMem",
    "外部 VMem 文件\n必须与项目路径相同, \n以“.vcbmem”为扩展名。",
    "将 vcbmem 数据\n复制到项目文件, \n并禁用外部编辑。",
    "十六进制",
    "0x00001",
    "外部编辑 VMem",
    "启用 VMem",
    "图例",
    "黄色-最高有效位\n蓝色-最低有效位",
    "地址锁存器",
    "将相机移动到\n地址位",
    "内容锁存器",
    "将相机移动到\n内容位",
    "仿真结束时, VMem持久区会被保留, \n可覆盖通过VMem编辑器手动设置的值, \n或写入外部VMem文件(.vcbmem)",
    "持久化内存",
    "持久化内存范围的首地址(含)",
    "起始",
    "持久化内存范围的末地址(含)",
    "终止",
    "新建项目\n$fs_new_project",
    "打开项目\n$fs_open_project",
    "保存项目\n$fs_save_project",
    "项目另存为",
    "打开最近项目与自动保存",
    "最近项目",
    "最近项目与自动保存\n将在此显示。",
    "项目名称",
    "自动保存",
    "撤销",
    "重做",
    "自动保存中",
    "new_circuit.vcb",
    "项目标题",
    "虚拟电路板",
    "Beta 版",
    "aaaaaaaaaaaaaaaaaaaaaa",
    "用户指南",
    "打开示例项目",
    "更新日志",
    "退出",
    "电路另存为",
    "切换左侧边栏\n$ui_toggle_left_sidebar",
    "打开项目",
    "保存项目",
    "仅编译可见区域, \n可用于查看电路指定区域的统计信息。",
    "切换游戏模式",
    "仿真",
    "上一步\n$sm_prev_update",
    "仿真时启动为暂停",
    "暂停仿真\n$sm_pause_simulation",
    "下一步\n$sm_next_update",
    "步进模式下每步推进周期数",
    "aaa",
    "目标仿真速度\n右键切换为输入数值",
    "目标仿真速度\n右键切换为滑块",
    "5000000",
    "渲染时使用装饰层",
    "365056 IPS",
    "高亮悬停实体",
    "允许虚拟输入消费\n绑定按键的键盘输入",
    "缩放时显示墨迹符号。\n右键切换连线符号显示",
    "墨迹符号覆盖层",
    "显示连线符号",
    "平面渲染",
    "切换汇编编辑器",
    "显示器",
    "显示",
    "分辨率",
    "目标仿真频率",
    "位置",
    "缩放",
    "主色",
    "背景色",
    "数字",
    "切换右侧边栏\n$ui_toggle_right_sidebar",
    "电路编辑器",
    "蓝图库",
    "用户指南",
    "VMem 编辑器",
    "VMem 设置",
    "笔记",
    "切换面板",
    "菜单标题",
    "最大化停靠栏",
    "菜单标题g"
]